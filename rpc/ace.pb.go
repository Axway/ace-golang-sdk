// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ace.proto

// Generated code resulting from this package is imported into both the sidecar and linkage

package rpc

import (
	fmt "fmt"
	messaging "github.com/Axway/ace-golang-sdk/messaging"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Service info specified in business logic and passed to sidecar for registration.
type ServiceInfo struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceVersion       string   `protobuf:"bytes,2,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	ServiceDescription   string   `protobuf:"bytes,3,opt,name=service_description,json=serviceDescription,proto3" json:"service_description,omitempty"`
	ServiceHost          string   `protobuf:"bytes,4,opt,name=service_host,json=serviceHost,proto3" json:"service_host,omitempty"`
	ServicePort          uint32   `protobuf:"varint,5,opt,name=service_port,json=servicePort,proto3" json:"service_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceInfo) Reset()         { *m = ServiceInfo{} }
func (m *ServiceInfo) String() string { return proto.CompactTextString(m) }
func (*ServiceInfo) ProtoMessage()    {}
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_671d051cacda6b9d, []int{0}
}

func (m *ServiceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceInfo.Unmarshal(m, b)
}
func (m *ServiceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceInfo.Marshal(b, m, deterministic)
}
func (m *ServiceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInfo.Merge(m, src)
}
func (m *ServiceInfo) XXX_Size() int {
	return xxx_messageInfo_ServiceInfo.Size(m)
}
func (m *ServiceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInfo proto.InternalMessageInfo

func (m *ServiceInfo) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceInfo) GetServiceVersion() string {
	if m != nil {
		return m.ServiceVersion
	}
	return ""
}

func (m *ServiceInfo) GetServiceDescription() string {
	if m != nil {
		return m.ServiceDescription
	}
	return ""
}

func (m *ServiceInfo) GetServiceHost() string {
	if m != nil {
		return m.ServiceHost
	}
	return ""
}

func (m *ServiceInfo) GetServicePort() uint32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

// Root structure for all STOMP messages.
type Message struct {
	// Unique ID of the message containing this payload.
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Unique ID of the message that was processed which resulted in this message.
	Parent_UUID string `protobuf:"bytes,2,opt,name=parent_UUID,json=parentUUID,proto3" json:"parent_UUID,omitempty"`
	// Term and upper bound sequence information if the parent message resulted in multiple children.
	SequenceTerm       uint64 `protobuf:"varint,3,opt,name=sequence_term,json=sequenceTerm,proto3" json:"sequence_term,omitempty"`
	SequenceUpperBound uint64 `protobuf:"varint,4,opt,name=sequence_upper_bound,json=sequenceUpperBound,proto3" json:"sequence_upper_bound,omitempty"`
	// UUID tied to choreography name.
	CHN_UUID string `protobuf:"bytes,5,opt,name=CHN_UUID,json=CHNUUID,proto3" json:"CHN_UUID,omitempty"`
	// UUID for this specific execution of the choreography.
	CHX_UUID                   string                     `protobuf:"bytes,6,opt,name=CHX_UUID,json=CHXUUID,proto3" json:"CHX_UUID,omitempty"`
	Pattern                    *StepPattern               `protobuf:"bytes,7,opt,name=pattern,proto3" json:"pattern,omitempty"`
	TopicName                  string                     `protobuf:"bytes,8,opt,name=topicName,proto3" json:"topicName,omitempty"`
	ID                         string                     `protobuf:"bytes,9,opt,name=ID,proto3" json:"ID,omitempty"`
	OpentracingContext         string                     `protobuf:"bytes,10,opt,name=opentracingContext,proto3" json:"opentracingContext,omitempty"`
	HasProcessingError         bool                       `protobuf:"varint,11,opt,name=hasProcessingError,proto3" json:"hasProcessingError,omitempty"`
	ProcessingErrorDescription string                     `protobuf:"bytes,12,opt,name=processingErrorDescription,proto3" json:"processingErrorDescription,omitempty"`
	HasSystemError             bool                       `protobuf:"varint,13,opt,name=hasSystemError,proto3" json:"hasSystemError,omitempty"`
	SystemErrorDescription     string                     `protobuf:"bytes,14,opt,name=systemErrorDescription,proto3" json:"systemErrorDescription,omitempty"`
	BusinessMessage            *messaging.BusinessMessage `protobuf:"bytes,15,opt,name=business_message,json=businessMessage,proto3" json:"business_message,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                   `json:"-"`
	XXX_unrecognized           []byte                     `json:"-"`
	XXX_sizecache              int32                      `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_671d051cacda6b9d, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Message) GetParent_UUID() string {
	if m != nil {
		return m.Parent_UUID
	}
	return ""
}

func (m *Message) GetSequenceTerm() uint64 {
	if m != nil {
		return m.SequenceTerm
	}
	return 0
}

func (m *Message) GetSequenceUpperBound() uint64 {
	if m != nil {
		return m.SequenceUpperBound
	}
	return 0
}

func (m *Message) GetCHN_UUID() string {
	if m != nil {
		return m.CHN_UUID
	}
	return ""
}

func (m *Message) GetCHX_UUID() string {
	if m != nil {
		return m.CHX_UUID
	}
	return ""
}

func (m *Message) GetPattern() *StepPattern {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *Message) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *Message) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Message) GetOpentracingContext() string {
	if m != nil {
		return m.OpentracingContext
	}
	return ""
}

func (m *Message) GetHasProcessingError() bool {
	if m != nil {
		return m.HasProcessingError
	}
	return false
}

func (m *Message) GetProcessingErrorDescription() string {
	if m != nil {
		return m.ProcessingErrorDescription
	}
	return ""
}

func (m *Message) GetHasSystemError() bool {
	if m != nil {
		return m.HasSystemError
	}
	return false
}

func (m *Message) GetSystemErrorDescription() string {
	if m != nil {
		return m.SystemErrorDescription
	}
	return ""
}

func (m *Message) GetBusinessMessage() *messaging.BusinessMessage {
	if m != nil {
		return m.BusinessMessage
	}
	return nil
}

type StepPattern struct {
	// Address of the name and version of the service this message is intended for.
	ServiceName    string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceVersion string `protobuf:"bytes,2,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	// Placeholder fields for payload transformation, routing, and validation.
	Validation     string `protobuf:"bytes,3,opt,name=validation,proto3" json:"validation,omitempty"`
	Evaluation     string `protobuf:"bytes,4,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	Transformation string `protobuf:"bytes,5,opt,name=transformation,proto3" json:"transformation,omitempty"`
	// Recursion of StepPattern to provide the overall structure of the choreography.
	Child                []*StepPattern `protobuf:"bytes,6,rep,name=child,proto3" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StepPattern) Reset()         { *m = StepPattern{} }
func (m *StepPattern) String() string { return proto.CompactTextString(m) }
func (*StepPattern) ProtoMessage()    {}
func (*StepPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_671d051cacda6b9d, []int{2}
}

func (m *StepPattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepPattern.Unmarshal(m, b)
}
func (m *StepPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepPattern.Marshal(b, m, deterministic)
}
func (m *StepPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepPattern.Merge(m, src)
}
func (m *StepPattern) XXX_Size() int {
	return xxx_messageInfo_StepPattern.Size(m)
}
func (m *StepPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_StepPattern.DiscardUnknown(m)
}

var xxx_messageInfo_StepPattern proto.InternalMessageInfo

func (m *StepPattern) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *StepPattern) GetServiceVersion() string {
	if m != nil {
		return m.ServiceVersion
	}
	return ""
}

func (m *StepPattern) GetValidation() string {
	if m != nil {
		return m.Validation
	}
	return ""
}

func (m *StepPattern) GetEvaluation() string {
	if m != nil {
		return m.Evaluation
	}
	return ""
}

func (m *StepPattern) GetTransformation() string {
	if m != nil {
		return m.Transformation
	}
	return ""
}

func (m *StepPattern) GetChild() []*StepPattern {
	if m != nil {
		return m.Child
	}
	return nil
}

// Simple confirmation structure for RPC calls.
type Receipt struct {
	IsOk                 bool     `protobuf:"varint,1,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Receipt) Reset()         { *m = Receipt{} }
func (m *Receipt) String() string { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()    {}
func (*Receipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_671d051cacda6b9d, []int{3}
}

func (m *Receipt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Receipt.Unmarshal(m, b)
}
func (m *Receipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Receipt.Marshal(b, m, deterministic)
}
func (m *Receipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receipt.Merge(m, src)
}
func (m *Receipt) XXX_Size() int {
	return xxx_messageInfo_Receipt.Size(m)
}
func (m *Receipt) XXX_DiscardUnknown() {
	xxx_messageInfo_Receipt.DiscardUnknown(m)
}

var xxx_messageInfo_Receipt proto.InternalMessageInfo

func (m *Receipt) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *Receipt) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceInfo)(nil), "rpc.ServiceInfo")
	proto.RegisterType((*Message)(nil), "rpc.Message")
	proto.RegisterType((*StepPattern)(nil), "rpc.StepPattern")
	proto.RegisterType((*Receipt)(nil), "rpc.Receipt")
}

func init() { proto.RegisterFile("ace.proto", fileDescriptor_671d051cacda6b9d) }

var fileDescriptor_671d051cacda6b9d = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xd1, 0x4e, 0x1b, 0x3b,
	0x10, 0x86, 0x59, 0x48, 0x48, 0x32, 0x09, 0x01, 0x19, 0xce, 0xd1, 0x9e, 0xe8, 0xa8, 0x4d, 0x83,
	0x44, 0xd3, 0x4a, 0x6c, 0x10, 0xad, 0x7a, 0x59, 0x89, 0x10, 0x24, 0xa2, 0xb6, 0x34, 0x5a, 0x4a,
	0x85, 0x7a, 0x13, 0x39, 0xce, 0xb0, 0xb1, 0x92, 0xb5, 0xb7, 0xb6, 0x93, 0xc2, 0x1b, 0xf4, 0xf1,
	0xfa, 0x1a, 0x95, 0xfa, 0x10, 0xd5, 0xda, 0x1b, 0x12, 0x28, 0xed, 0x55, 0xef, 0xd6, 0xff, 0xff,
	0x69, 0x7f, 0xdb, 0xe3, 0x19, 0x28, 0x51, 0x86, 0x41, 0xa2, 0xa4, 0x91, 0x64, 0x4d, 0x25, 0xac,
	0x56, 0x1d, 0x4c, 0x35, 0x17, 0xa8, 0xb5, 0x13, 0x1b, 0xdf, 0x3c, 0x28, 0x9f, 0xa3, 0x9a, 0x71,
	0x86, 0x5d, 0x71, 0x25, 0xc9, 0x13, 0xa8, 0x68, 0xb7, 0xec, 0x0b, 0x1a, 0xa3, 0xef, 0xd5, 0xbd,
	0x66, 0x29, 0x2c, 0x67, 0xda, 0x19, 0x8d, 0x91, 0x3c, 0x85, 0xcd, 0x39, 0x32, 0x43, 0xa5, 0xb9,
	0x14, 0xfe, 0xaa, 0xa5, 0xaa, 0x99, 0xfc, 0xd1, 0xa9, 0xa4, 0x05, 0xdb, 0x73, 0x70, 0x88, 0x9a,
	0x29, 0x9e, 0x98, 0x14, 0x5e, 0xb3, 0x30, 0xc9, 0xac, 0xce, 0xc2, 0x59, 0x0e, 0x1f, 0x49, 0x6d,
	0xfc, 0xdc, 0x9d, 0xf0, 0x53, 0xa9, 0xcd, 0x32, 0x92, 0x48, 0x65, 0xfc, 0x7c, 0xdd, 0x6b, 0x6e,
	0xdc, 0x22, 0x3d, 0xa9, 0x4c, 0xe3, 0x47, 0x0e, 0x0a, 0xef, 0x50, 0x6b, 0x1a, 0x21, 0x21, 0x90,
	0xbb, 0xb8, 0xe8, 0x76, 0xb2, 0x63, 0xd8, 0x6f, 0xf2, 0x18, 0xca, 0x09, 0x55, 0x28, 0x4c, 0xdf,
	0x5a, 0x6e, 0xef, 0xe0, 0x24, 0x0b, 0xec, 0xc2, 0x86, 0xc6, 0xcf, 0x53, 0x14, 0x0c, 0xfb, 0x06,
	0x55, 0x6c, 0x77, 0x9c, 0x0b, 0x2b, 0x73, 0xf1, 0x03, 0xaa, 0x98, 0x1c, 0xc0, 0xce, 0x2d, 0x34,
	0x4d, 0x12, 0x54, 0xfd, 0x81, 0x9c, 0x8a, 0xa1, 0xdd, 0x73, 0x2e, 0x3d, 0x9d, 0xf3, 0x2e, 0x52,
	0xab, 0x9d, 0x3a, 0xe4, 0x3f, 0x28, 0x1e, 0x9f, 0x9e, 0xb9, 0xd0, 0xbc, 0x0d, 0x2d, 0x1c, 0x9f,
	0x9e, 0xd9, 0x44, 0x6b, 0x5d, 0x3a, 0x6b, 0x7d, 0x6e, 0x5d, 0x5a, 0xeb, 0x39, 0x14, 0x12, 0x6a,
	0x0c, 0x2a, 0xe1, 0x17, 0xea, 0x5e, 0xb3, 0x7c, 0xb8, 0x15, 0xa8, 0x84, 0x05, 0xe7, 0x06, 0x93,
	0x9e, 0xd3, 0xc3, 0x39, 0x40, 0xfe, 0x87, 0x92, 0x91, 0x09, 0x67, 0x69, 0x99, 0xfc, 0xa2, 0xfd,
	0xcf, 0x42, 0x20, 0x55, 0x58, 0xed, 0x76, 0xfc, 0x92, 0x95, 0x57, 0xbb, 0x1d, 0x12, 0x00, 0x91,
	0x09, 0x0a, 0xa3, 0x28, 0xe3, 0x22, 0x3a, 0x96, 0xc2, 0xe0, 0xb5, 0xf1, 0xc1, 0x55, 0xe7, 0x57,
	0x27, 0xe5, 0x47, 0x54, 0xf7, 0x94, 0x64, 0xa8, 0x35, 0x17, 0xd1, 0x89, 0x52, 0x52, 0xf9, 0xe5,
	0xba, 0xd7, 0x2c, 0x86, 0x0f, 0x38, 0xe4, 0x35, 0xd4, 0x92, 0xbb, 0xd2, 0x52, 0xad, 0xfd, 0x8a,
	0xcd, 0xf9, 0x03, 0x41, 0xf6, 0xa0, 0x3a, 0xa2, 0xfa, 0xfc, 0x46, 0x1b, 0x8c, 0x5d, 0xd6, 0x86,
	0xcd, 0xba, 0xa7, 0x92, 0x57, 0xf0, 0xaf, 0x5e, 0x2c, 0x97, 0x33, 0xaa, 0x36, 0xe3, 0x37, 0x2e,
	0x39, 0x81, 0xad, 0x79, 0x33, 0xf4, 0x63, 0xf7, 0x5e, 0xfc, 0x4d, 0x7b, 0xc5, 0xb5, 0xc0, 0xad,
	0xb9, 0x88, 0x82, 0x76, 0x86, 0x64, 0x2f, 0x2a, 0xdc, 0x1c, 0xdc, 0x15, 0x1a, 0xdf, 0xd3, 0x0e,
	0x5a, 0x54, 0xe3, 0xaf, 0x76, 0xd0, 0x23, 0x80, 0x19, 0x9d, 0xf0, 0x21, 0x5d, 0x6a, 0x9c, 0x25,
	0x25, 0xf5, 0x71, 0x46, 0x27, 0x53, 0xe7, 0xbb, 0x76, 0x59, 0x52, 0xd2, 0x2b, 0x34, 0x8a, 0x0a,
	0x7d, 0x25, 0x55, 0xec, 0x18, 0xf7, 0xf0, 0xee, 0xa9, 0x64, 0x0f, 0xf2, 0x6c, 0xc4, 0x27, 0x43,
	0x7f, 0xbd, 0xbe, 0xf6, 0xe0, 0x13, 0x73, 0x76, 0xe3, 0x25, 0x14, 0x42, 0x64, 0xc8, 0x13, 0x43,
	0xb6, 0x21, 0xcf, 0x75, 0x5f, 0x8e, 0xed, 0xf9, 0x8a, 0x61, 0x8e, 0xeb, 0xf7, 0x63, 0xb2, 0x03,
	0x79, 0xb4, 0x95, 0x72, 0xc7, 0x71, 0x8b, 0xc3, 0x2b, 0x28, 0xbc, 0xe5, 0x62, 0x9c, 0xf6, 0xe3,
	0x01, 0x54, 0x42, 0x8c, 0xb8, 0x36, 0xca, 0x05, 0x67, 0x49, 0x8b, 0x01, 0x54, 0xab, 0x58, 0x25,
	0x4b, 0x69, 0xac, 0x90, 0x67, 0x90, 0x0f, 0x71, 0x42, 0x6f, 0x88, 0x33, 0xb2, 0x5b, 0xbf, 0x8f,
	0x35, 0xbd, 0x03, 0xaf, 0xfd, 0x06, 0xfe, 0x61, 0x32, 0x0e, 0xe8, 0xf5, 0x17, 0x7a, 0x13, 0xa4,
	0x73, 0x4f, 0x0f, 0xc7, 0x29, 0xd6, 0x2e, 0x1e, 0x31, 0xec, 0xa5, 0xe3, 0xae, 0xe7, 0x7d, 0xda,
	0x8d, 0xb8, 0x19, 0x4d, 0x07, 0x01, 0x93, 0x71, 0xeb, 0x28, 0x25, 0x5b, 0x94, 0xe1, 0x7e, 0x24,
	0x27, 0x54, 0x44, 0xfb, 0x7a, 0x38, 0x6e, 0xa9, 0x84, 0x7d, 0xf5, 0x56, 0x06, 0xeb, 0x76, 0x3e,
	0xbe, 0xf8, 0x19, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x52, 0xc6, 0x09, 0x41, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LinkageClient is the client API for Linkage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LinkageClient interface {
	Registration(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Receipt, error)
	Relay(ctx context.Context, opts ...grpc.CallOption) (Linkage_RelayClient, error)
}

type linkageClient struct {
	cc *grpc.ClientConn
}

func NewLinkageClient(cc *grpc.ClientConn) LinkageClient {
	return &linkageClient{cc}
}

func (c *linkageClient) Registration(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/rpc.Linkage/Registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkageClient) Relay(ctx context.Context, opts ...grpc.CallOption) (Linkage_RelayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Linkage_serviceDesc.Streams[0], "/rpc.Linkage/Relay", opts...)
	if err != nil {
		return nil, err
	}
	x := &linkageRelayClient{stream}
	return x, nil
}

type Linkage_RelayClient interface {
	Send(*Message) error
	Recv() (*Receipt, error)
	grpc.ClientStream
}

type linkageRelayClient struct {
	grpc.ClientStream
}

func (x *linkageRelayClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *linkageRelayClient) Recv() (*Receipt, error) {
	m := new(Receipt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LinkageServer is the server API for Linkage service.
type LinkageServer interface {
	Registration(context.Context, *ServiceInfo) (*Receipt, error)
	Relay(Linkage_RelayServer) error
}

func RegisterLinkageServer(s *grpc.Server, srv LinkageServer) {
	s.RegisterService(&_Linkage_serviceDesc, srv)
}

func _Linkage_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkageServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Linkage/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkageServer).Registration(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linkage_Relay_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LinkageServer).Relay(&linkageRelayServer{stream})
}

type Linkage_RelayServer interface {
	Send(*Receipt) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type linkageRelayServer struct {
	grpc.ServerStream
}

func (x *linkageRelayServer) Send(m *Receipt) error {
	return x.ServerStream.SendMsg(m)
}

func (x *linkageRelayServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Linkage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Linkage",
	HandlerType: (*LinkageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registration",
			Handler:    _Linkage_Registration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Relay",
			Handler:       _Linkage_Relay_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ace.proto",
}
